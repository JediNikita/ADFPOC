{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-np-poc-idbinvest-tms"
		},
		"AzureFunctionLinkedService_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunctionLinkedService'"
		},
		"DataLakeLinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLakeLinkedService'"
		},
		"AzureFunctionLinkedService_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://fn-np-poc-idbinvest-bloomberg-in-sftp.azurewebsites.net"
		},
		"DataLakeLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsnpdidbibloomberg.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RecordCountCheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CountingRowsDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CountingRowsDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SecurityMasterRaw": {},
									"RowCountSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "ExtractFooter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExtractFooter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SecurityMasterRaw": {},
									"RowCountSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CountingRowsDataFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExtractFooter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CountingRowsDataFlow').output == activity('ExtractFooter').output",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "pipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DateTimeCheck",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CountingRowsDataFlow')]",
				"[concat(variables('factoryId'), '/dataflows/ExtractFooter')]",
				"[concat(variables('factoryId'), '/pipelines/DateTimeCheck')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DateTimeCheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractHeader",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExtractHeader",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SecurityMasterRaw": {},
									"DateSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ExtractHeader",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('ExtractHeader').output==utcnow()",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "RemoveHeaderAndFooter",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "RemoveHeaderAndFooter",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SecurityMasterRaw": {},
												"SMWithoutHeaderAndFooter": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ExtractHeader')]",
				"[concat(variables('factoryId'), '/dataflows/RemoveHeaderAndFooter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMWithoutHeaderAndFooter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "patternmatching",
						"fileSystem": "success"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SecurityMasterBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "f6600af400.ext.210622.1",
						"folderPath": "sftpfiles/sftp.bloomberg/06292021",
						"fileSystem": "prubcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunctionLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunctionLinkedService_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunctionLinkedService_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLakeLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLakeLinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CountingRowsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SecurityMasterBlob",
								"type": "DatasetReference"
							},
							"name": "SecurityMasterRaw"
						}
					],
					"sinks": [
						{
							"name": "RowCountSink"
						}
					],
					"transformations": [
						{
							"name": "RowCount"
						},
						{
							"name": "Serialization"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string,\n\t\tColumn_36 as string,\n\t\tColumn_37 as string,\n\t\tColumn_38 as string,\n\t\tColumn_39 as string,\n\t\tColumn_40 as string,\n\t\tColumn_41 as string,\n\t\tColumn_42 as string,\n\t\tColumn_43 as string,\n\t\tColumn_44 as string,\n\t\tColumn_45 as string,\n\t\tColumn_46 as string,\n\t\tColumn_47 as string,\n\t\tColumn_48 as string,\n\t\tColumn_49 as string,\n\t\tColumn_50 as string,\n\t\tColumn_51 as string,\n\t\tColumn_52 as string,\n\t\tColumn_53 as string,\n\t\tColumn_54 as string,\n\t\tColumn_55 as string,\n\t\tColumn_56 as string,\n\t\tColumn_57 as string,\n\t\tColumn_58 as string,\n\t\tColumn_59 as string,\n\t\tColumn_60 as string,\n\t\tColumn_61 as string,\n\t\tColumn_62 as string,\n\t\tColumn_63 as string,\n\t\tColumn_64 as string,\n\t\tColumn_65 as string,\n\t\tColumn_66 as string,\n\t\tColumn_67 as string,\n\t\tColumn_68 as string,\n\t\tColumn_69 as string,\n\t\tColumn_70 as string,\n\t\tColumn_71 as string,\n\t\tColumn_72 as string,\n\t\tColumn_73 as string,\n\t\tColumn_74 as string,\n\t\tColumn_75 as string,\n\t\tColumn_76 as string,\n\t\tColumn_77 as string,\n\t\tColumn_78 as string,\n\t\tColumn_79 as string,\n\t\tColumn_80 as string,\n\t\tColumn_81 as string,\n\t\tColumn_82 as string,\n\t\tColumn_83 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SecurityMasterRaw\nSerialization aggregate(SNo = count('SNo') -2) ~> RowCount\nSecurityMasterRaw keyGenerate(output(SNo as long),\n\tstartAt: 1L) ~> Serialization\nRowCount sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: true,\n\tsaveOrder: 1) ~> RowCountSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SecurityMasterBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractFooter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SecurityMasterBlob",
								"type": "DatasetReference"
							},
							"name": "SecurityMasterRaw"
						}
					],
					"sinks": [
						{
							"name": "RowCountSink"
						}
					],
					"transformations": [
						{
							"name": "Serialization"
						},
						{
							"name": "RankingSNo"
						},
						{
							"name": "FilterFooter"
						},
						{
							"name": "SelectFooter"
						},
						{
							"name": "CountOfRecords"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string,\n\t\tColumn_36 as string,\n\t\tColumn_37 as string,\n\t\tColumn_38 as string,\n\t\tColumn_39 as string,\n\t\tColumn_40 as string,\n\t\tColumn_41 as string,\n\t\tColumn_42 as string,\n\t\tColumn_43 as string,\n\t\tColumn_44 as string,\n\t\tColumn_45 as string,\n\t\tColumn_46 as string,\n\t\tColumn_47 as string,\n\t\tColumn_48 as string,\n\t\tColumn_49 as string,\n\t\tColumn_50 as string,\n\t\tColumn_51 as string,\n\t\tColumn_52 as string,\n\t\tColumn_53 as string,\n\t\tColumn_54 as string,\n\t\tColumn_55 as string,\n\t\tColumn_56 as string,\n\t\tColumn_57 as string,\n\t\tColumn_58 as string,\n\t\tColumn_59 as string,\n\t\tColumn_60 as string,\n\t\tColumn_61 as string,\n\t\tColumn_62 as string,\n\t\tColumn_63 as string,\n\t\tColumn_64 as string,\n\t\tColumn_65 as string,\n\t\tColumn_66 as string,\n\t\tColumn_67 as string,\n\t\tColumn_68 as string,\n\t\tColumn_69 as string,\n\t\tColumn_70 as string,\n\t\tColumn_71 as string,\n\t\tColumn_72 as string,\n\t\tColumn_73 as string,\n\t\tColumn_74 as string,\n\t\tColumn_75 as string,\n\t\tColumn_76 as string,\n\t\tColumn_77 as string,\n\t\tColumn_78 as string,\n\t\tColumn_79 as string,\n\t\tColumn_80 as string,\n\t\tColumn_81 as string,\n\t\tColumn_82 as string,\n\t\tColumn_83 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> SecurityMasterRaw\nSecurityMasterRaw keyGenerate(output(SNo as long),\n\tstartAt: 1L) ~> Serialization\nSerialization rank(desc(SNo, true),\n\toutput(Rank as long)) ~> RankingSNo\nRankingSNo filter(Rank==1) ~> FilterFooter\nCountOfRecords select(mapColumn(\n\t\tCountOfRecords\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFooter\nFilterFooter derive(CountOfRecords = substring(Column_1, 6, 11)) ~> CountOfRecords\nSelectFooter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: true,\n\tsaveOrder: 1) ~> RowCountSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SecurityMasterBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractHeader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SecurityMasterBlob",
								"type": "DatasetReference"
							},
							"name": "SecurityMasterRaw"
						}
					],
					"sinks": [
						{
							"name": "DateSink"
						}
					],
					"transformations": [
						{
							"name": "Serialization"
						},
						{
							"name": "FilterSNo"
						},
						{
							"name": "SelectFirstColumn"
						},
						{
							"name": "ExtractingDate"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string,\n\t\tColumn_36 as string,\n\t\tColumn_37 as string,\n\t\tColumn_38 as string,\n\t\tColumn_39 as string,\n\t\tColumn_40 as string,\n\t\tColumn_41 as string,\n\t\tColumn_42 as string,\n\t\tColumn_43 as string,\n\t\tColumn_44 as string,\n\t\tColumn_45 as string,\n\t\tColumn_46 as string,\n\t\tColumn_47 as string,\n\t\tColumn_48 as string,\n\t\tColumn_49 as string,\n\t\tColumn_50 as string,\n\t\tColumn_51 as string,\n\t\tColumn_52 as string,\n\t\tColumn_53 as string,\n\t\tColumn_54 as string,\n\t\tColumn_55 as string,\n\t\tColumn_56 as string,\n\t\tColumn_57 as string,\n\t\tColumn_58 as string,\n\t\tColumn_59 as string,\n\t\tColumn_60 as string,\n\t\tColumn_61 as string,\n\t\tColumn_62 as string,\n\t\tColumn_63 as string,\n\t\tColumn_64 as string,\n\t\tColumn_65 as string,\n\t\tColumn_66 as string,\n\t\tColumn_67 as string,\n\t\tColumn_68 as string,\n\t\tColumn_69 as string,\n\t\tColumn_70 as string,\n\t\tColumn_71 as string,\n\t\tColumn_72 as string,\n\t\tColumn_73 as string,\n\t\tColumn_74 as string,\n\t\tColumn_75 as string,\n\t\tColumn_76 as string,\n\t\tColumn_77 as string,\n\t\tColumn_78 as string,\n\t\tColumn_79 as string,\n\t\tColumn_80 as string,\n\t\tColumn_81 as string,\n\t\tColumn_82 as string,\n\t\tColumn_83 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SecurityMasterRaw\nSecurityMasterRaw keyGenerate(output(SNo as long),\n\tstartAt: 1L) ~> Serialization\nSerialization filter(SNo==1) ~> FilterSNo\nExtractingDate select(mapColumn(\n\t\tHeaderDate = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFirstColumn\nFilterSNo derive(Date = substring(Column_1, 12,21)) ~> ExtractingDate\nSelectFirstColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: true,\n\tsaveOrder: 1) ~> DateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SecurityMasterBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RemoveHeaderAndFooter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SecurityMasterBlob",
								"type": "DatasetReference"
							},
							"name": "SecurityMasterRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SMWithoutHeaderAndFooter",
								"type": "DatasetReference"
							},
							"name": "SMWithoutHeaderAndFooter"
						}
					],
					"transformations": [
						{
							"name": "Rank"
						},
						{
							"name": "Serialization"
						},
						{
							"name": "RemoveFooter"
						},
						{
							"name": "RemoveRankAndSno"
						},
						{
							"name": "SortSNo"
						}
					],
					"script": "source(output(\n\t\t{Financial Instrument Global Identifier (FIGI)} as string,\n\t\t{Firm Identifier} as string,\n\t\t{Security Identifier Flag} as short,\n\t\t{Unique Identifier} as string,\n\t\t{Cusip Number} as string,\n\t\t{ISIN Number} as string,\n\t\tTicker as string,\n\t\t{Parskeyeable Description} as string,\n\t\t{Security Name} as string,\n\t\t{Short Name} as string,\n\t\tCountry as short,\n\t\tCurrency as short,\n\t\t{Security Type} as string,\n\t\t{Market Sector Description} as string,\n\t\t{PRPL Indicator} as boolean,\n\t\t{Quote Type} as short,\n\t\t{Pricing Source} as string,\n\t\t{CDR Settle Code} as string,\n\t\t{Next Reset Date} as string,\n\t\t{Last Reset Date} as string,\n\t\t{Coupon Type} as string,\n\t\tCoupon as string,\n\t\t{Coupon as of Date} as string,\n\t\t{Coupon Frequency} as string,\n\t\t{Reset Frequency} as string,\n\t\t{First Settle Date} as string,\n\t\t{First Coupon Payment Date} as string,\n\t\t{Next Coupon Settle Date} as string,\n\t\t{Interest Accrual Date} as string,\n\t\tMaturity as string,\n\t\t{Floater Indicator} as string,\n\t\t{Coupon Rate Fixing Method} as string,\n\t\t{Coupon Convention} as string,\n\t\t{Floater Spread (bp)} as string,\n\t\t{Reset Index} as string,\n\t\t{Amount Issued} as string,\n\t\t{Amount Outstanding} as string,\n\t\t{Issue Date} as string,\n\t\t{Issue Price} as string,\n\t\t{Bloomberg Company Identifier} as string,\n\t\tIssuer as string,\n\t\t{Issuer Industry} as string,\n\t\t{Call Indicator} as string,\n\t\t{Bond Called Indicator} as string,\n\t\t{Next Call Date} as string,\n\t\t{Next Put Date} as string,\n\t\t{Next Call Price} as string,\n\t\t{Next Put Price} as string,\n\t\t{Day Count Description} as string,\n\t\t{Day Count} as string,\n\t\t{Calculation Type Description} as string,\n\t\t{Calculation Type} as string,\n\t\t{Collateral Type} as string,\n\t\t{Swap Type} as string,\n\t\t{Swap Counterparty} as string,\n\t\t{Calc Basis Fixed Leg Pay Side} as string,\n\t\t{Float Lag Term} as string,\n\t\t{Swap Trade Date} as string,\n\t\t{Effective Date} as string,\n\t\t{Pay Side Effective Date} as string,\n\t\t{Pay Currency} as string,\n\t\t{Pay Side Coupon Type} as string,\n\t\t{Pay Coupon} as string,\n\t\t{Pay Frequency} as string,\n\t\t{Pay Floating Rate Index} as string,\n\t\t{Pay Spread} as string,\n\t\t{Pay Reset Frequency} as string,\n\t\t{Pay Side Day Count} as string,\n\t\t{Pay Side Business Day Adjustment} as string,\n\t\t{Pay Side Date Rolling Convention} as string,\n\t\t{Pay Leg Compounding Method} as string,\n\t\t{Receive Side Effective Date} as string,\n\t\t{Receive Currency} as string,\n\t\t{Receive Side Coupon Type} as string,\n\t\t{Receive Coupon} as string,\n\t\t{Receive Frequency} as string,\n\t\t{Receive Floating Rate Index} as string,\n\t\t{Receive Spread} as string,\n\t\t{Receive Reset Frequency} as string,\n\t\t{Receive Side Day Count} as string,\n\t\t{Receive Side Business Day Adjustment} as string,\n\t\t{Receive Side Date Rolling Convention} as string,\n\t\t{Receive Leg Compounding Method} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> SecurityMasterRaw\nSerialization rank(desc(SNo, true),\n\toutput(Rank as long)) ~> Rank\nSecurityMasterRaw keyGenerate(output(SNo as long),\n\tstartAt: 1L) ~> Serialization\nRank filter(Rank>1) ~> RemoveFooter\nSortSNo select(mapColumn(\n\t\t{Financial Instrument Global Identifier (FIGI)},\n\t\t{Firm Identifier},\n\t\t{Security Identifier Flag},\n\t\t{Unique Identifier},\n\t\t{Cusip Number},\n\t\t{ISIN Number},\n\t\tTicker,\n\t\t{Parskeyeable Description},\n\t\t{Security Name},\n\t\t{Short Name},\n\t\tCountry,\n\t\tCurrency,\n\t\t{Security Type},\n\t\t{Market Sector Description},\n\t\t{PRPL Indicator},\n\t\t{Quote Type},\n\t\t{Pricing Source},\n\t\t{CDR Settle Code},\n\t\t{Next Reset Date},\n\t\t{Last Reset Date},\n\t\t{Coupon Type},\n\t\tCoupon,\n\t\t{Coupon as of Date},\n\t\t{Coupon Frequency},\n\t\t{Reset Frequency},\n\t\t{First Settle Date},\n\t\t{First Coupon Payment Date},\n\t\t{Next Coupon Settle Date},\n\t\t{Interest Accrual Date},\n\t\tMaturity,\n\t\t{Floater Indicator},\n\t\t{Coupon Rate Fixing Method},\n\t\t{Coupon Convention},\n\t\t{Floater Spread (bp)},\n\t\t{Reset Index},\n\t\t{Amount Issued},\n\t\t{Amount Outstanding},\n\t\t{Issue Date},\n\t\t{Issue Price},\n\t\t{Bloomberg Company Identifier},\n\t\tIssuer,\n\t\t{Issuer Industry},\n\t\t{Call Indicator},\n\t\t{Bond Called Indicator},\n\t\t{Next Call Date},\n\t\t{Next Put Date},\n\t\t{Next Call Price},\n\t\t{Next Put Price},\n\t\t{Day Count Description},\n\t\t{Day Count},\n\t\t{Calculation Type Description},\n\t\t{Calculation Type},\n\t\t{Collateral Type},\n\t\t{Swap Type},\n\t\t{Swap Counterparty},\n\t\t{Calc Basis Fixed Leg Pay Side},\n\t\t{Float Lag Term},\n\t\t{Swap Trade Date},\n\t\t{Effective Date},\n\t\t{Pay Side Effective Date},\n\t\t{Pay Currency},\n\t\t{Pay Side Coupon Type},\n\t\t{Pay Coupon},\n\t\t{Pay Frequency},\n\t\t{Pay Floating Rate Index},\n\t\t{Pay Spread},\n\t\t{Pay Reset Frequency},\n\t\t{Pay Side Day Count},\n\t\t{Pay Side Business Day Adjustment},\n\t\t{Pay Side Date Rolling Convention},\n\t\t{Pay Leg Compounding Method},\n\t\t{Receive Side Effective Date},\n\t\t{Receive Currency},\n\t\t{Receive Side Coupon Type},\n\t\t{Receive Coupon},\n\t\t{Receive Frequency},\n\t\t{Receive Floating Rate Index},\n\t\t{Receive Spread},\n\t\t{Receive Reset Frequency},\n\t\t{Receive Side Day Count},\n\t\t{Receive Side Business Day Adjustment},\n\t\t{Receive Side Date Rolling Convention},\n\t\t{Receive Leg Compounding Method}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveRankAndSno\nRemoveFooter sort(asc(SNo, true)) ~> SortSNo\nRemoveRankAndSno sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SMWithoutHeaderAndFooter"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SecurityMasterBlob')]",
				"[concat(variables('factoryId'), '/datasets/SMWithoutHeaderAndFooter')]"
			]
		}
	]
}